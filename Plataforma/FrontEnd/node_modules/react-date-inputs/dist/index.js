var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { default as React, useRef, useEffect, useState } from 'react';
import { getDate, getMonth, getYear } from 'date-fns';
import { Unit } from './types';
import { daysInMonth, isValid, getCappedUnits } from './utils/date';
export var BASE_CLASS = 'react-date-inputs';
var DefaultInputComponent = React.forwardRef(function (props, ref) { return (React.createElement("input", __assign({}, props, { ref: ref }))); });
DefaultInputComponent.displayName = 'DefaultInputComponent';
var DefaultLabelComponent = function (props) { return React.createElement("label", __assign({}, props)); };
export var DateInputs = function (_a) {
    var value = _a.value, onChange = _a.onChange, onBlur = _a.onBlur, _b = _a.dayPlaceholder, dayPlaceholder = _b === void 0 ? 'DD' : _b, _c = _a.monthPlaceholder, monthPlaceholder = _c === void 0 ? 'MM' : _c, _d = _a.yearPlaceholder, yearPlaceholder = _d === void 0 ? 'YYYY' : _d, className = _a.className, label = _a.label, _e = _a.disabled, disabled = _e === void 0 ? false : _e, _f = _a.inputComponent, InputComponent = _f === void 0 ? DefaultInputComponent : _f, _g = _a.labelComponent, LabelComponent = _g === void 0 ? DefaultLabelComponent : _g, _h = _a.inputComponentProps, inputComponentProps = _h === void 0 ? {} : _h, _j = _a.labelComponentProps, labelComponentProps = _j === void 0 ? {} : _j, _k = _a.show, show = _k === void 0 ? [Unit.day, Unit.month, Unit.year] : _k, _l = _a.autoTab, autoTab = _l === void 0 ? false : _l;
    var dayInputRef = useRef(null);
    var monthInputRef = useRef(null);
    var yearInputRef = useRef(null);
    var _m = useState({
        day: getDate(value) || undefined,
        month: getMonth(value) + 1 || undefined,
        year: getYear(value) || undefined,
    }), parsedValues = _m[0], setParsedValues = _m[1];
    useEffect(function () {
        var _a = parsedValues.day, day = _a === void 0 ? show.includes(Unit.day) ? undefined : 1 : _a, _b = parsedValues.month, month = _b === void 0 ? show.includes(Unit.month) ? undefined : 1 : _b, _c = parsedValues.year, year = _c === void 0 ? show.includes(Unit.year) ? undefined : 2020 : _c;
        var isInitial = day === getDate(value) &&
            month === getMonth(value) + 1 &&
            year === getYear(value);
        if (onChange && !isInitial) {
            if (day === undefined || month === undefined || year === undefined) {
                onChange(undefined);
            }
            else if (isValid(day, month, year) && year.toString().length === 4) {
                onChange(new Date(year, month - 1, day));
            }
            else {
                onChange(undefined);
            }
        }
    }, [parsedValues]);
    var handleFocus = function (_a, inputId) {
        var _b, _c;
        var day = _a.day, month = _a.month, year = _a.year;
        var maxDays = month ? daysInMonth(month, year) : 31;
        if (inputId === Unit.day && parseInt(day + '1', 10) > maxDays)
            (_b = monthInputRef.current) === null || _b === void 0 ? void 0 : _b.select();
        if (inputId === Unit.month && parseInt(month + '1', 10) > 12)
            (_c = yearInputRef.current) === null || _c === void 0 ? void 0 : _c.select();
    };
    var handleChange = function (e, inputId) {
        var _a;
        var val = parseInt(e.target.value, 10);
        var newUnitValue = val >= 0 ? val : undefined;
        var newParsedValues = __assign(__assign({}, parsedValues), (_a = {}, _a[inputId] = newUnitValue, _a));
        var cappedValues = getCappedUnits(newParsedValues);
        if (autoTab)
            handleFocus(newParsedValues, inputId);
        setParsedValues(cappedValues);
    };
    var handleGroupBlur = function (e) {
        var currentTarget = e.currentTarget;
        setTimeout(function () {
            if (!currentTarget.contains(document.activeElement))
                onBlur && onBlur(e);
        }, 0);
    };
    return (React.createElement("div", { className: "" + BASE_CLASS + (className ? " " + className : ''), "data-testid": BASE_CLASS },
        label && (React.createElement(LabelComponent, __assign({ className: BASE_CLASS + "__label", "data-testid": BASE_CLASS + "__label" }, labelComponentProps), label)),
        React.createElement("div", { onBlur: handleGroupBlur, className: BASE_CLASS + "__inputs-wrapper", "data-testid": BASE_CLASS + "__inputs-wrapper" },
            show.includes(Unit.day) && (React.createElement(InputComponent, __assign({ type: "text", pattern: "[0-9]*", placeholder: dayPlaceholder, onChange: function (e) { return handleChange(e, Unit.day); }, value: parsedValues.day || '', className: BASE_CLASS + "__day", "data-testid": BASE_CLASS + "__day", ref: dayInputRef, disabled: disabled, maxLength: "2" }, inputComponentProps))),
            show.includes(Unit.month) && (React.createElement(InputComponent, __assign({ type: "text", pattern: "[0-9]*", placeholder: monthPlaceholder, onChange: function (e) { return handleChange(e, Unit.month); }, value: parsedValues.month || '', className: BASE_CLASS + "__month", "data-testid": BASE_CLASS + "__month", ref: monthInputRef, disabled: disabled, maxLength: "2" }, inputComponentProps))),
            show.includes(Unit.year) && (React.createElement(InputComponent, __assign({ type: "text", pattern: "[0-9]*", placeholder: yearPlaceholder, onChange: function (e) { return handleChange(e, Unit.year); }, value: parsedValues.year || '', className: BASE_CLASS + "__year", "data-testid": BASE_CLASS + "__year", ref: yearInputRef, disabled: disabled, maxLength: "4" }, inputComponentProps))))));
};
export default DateInputs;
//# sourceMappingURL=index.js.map