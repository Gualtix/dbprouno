{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCIconButtonToggleFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCIconButtonToggleFoundation, _super);\n\n  function MDCIconButtonToggleFoundation(adapter) {\n    return _super.call(this, tslib_1.__assign({}, MDCIconButtonToggleFoundation.defaultAdapter, adapter)) || this;\n  }\n\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        notifyChange: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        setAttr: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCIconButtonToggleFoundation.prototype.init = function () {\n    this.adapter_.setAttr(strings.ARIA_PRESSED, \"\" + this.isOn());\n  };\n\n  MDCIconButtonToggleFoundation.prototype.handleClick = function () {\n    this.toggle();\n    this.adapter_.notifyChange({\n      isOn: this.isOn()\n    });\n  };\n\n  MDCIconButtonToggleFoundation.prototype.isOn = function () {\n    return this.adapter_.hasClass(cssClasses.ICON_BUTTON_ON);\n  };\n\n  MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {\n    if (isOn === void 0) {\n      isOn = !this.isOn();\n    }\n\n    if (isOn) {\n      this.adapter_.addClass(cssClasses.ICON_BUTTON_ON);\n    } else {\n      this.adapter_.removeClass(cssClasses.ICON_BUTTON_ON);\n    }\n\n    this.adapter_.setAttr(strings.ARIA_PRESSED, \"\" + isOn);\n  };\n\n  return MDCIconButtonToggleFoundation;\n}(MDCFoundation);\n\nexport { MDCIconButtonToggleFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCIconButtonToggleFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,aAAR,QAA4B,2BAA5B;AAEA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,aAAlC;;AAEA,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,OAAA,CAAA,SAAA,CAAA,6BAAA,EAAA,MAAA;;AAmBjD,WAAA,6BAAA,CAAY,OAAZ,EAAyD;WACvD,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAU,6BAA6B,CAAC,cAAxC,EAA2D,OAA3D,CAAA,KAAoE,I;AACrE;;AApBD,EAAA,MAAA,CAAA,cAAA,CAAW,6BAAX,EAAW,YAAX,EAAqB;SAArB,YAAA;AACE,aAAO,UAAP;AACD,KAFoB;oBAAA;;AAAA,GAArB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,6BAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACE,aAAO,OAAP;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,6BAAX,EAAW,gBAAX,EAAyB;SAAzB,YAAA;AACE,aAAO;AACL,QAAA,QAAQ,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SADpB;AAEL,QAAA,QAAQ,EAAE,YAAA;AAAM,iBAAA,KAAA;AAAK,SAFhB;AAGL,QAAA,YAAY,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SAHxB;AAIL,QAAA,WAAW,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SAJvB;AAKL,QAAA,OAAO,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS;AALnB,OAAP;AAOD,KARwB;oBAAA;;AAAA,GAAzB;;AAcA,EAAA,6BAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,OAAd,CAAsB,OAAO,CAAC,YAA9B,EAA4C,KAAG,KAAK,IAAL,EAA/C;AACD,GAFD;;AAIA,EAAA,6BAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,SAAK,MAAL;AACA,SAAK,QAAL,CAAc,YAAd,CAA2B;AAAC,MAAA,IAAI,EAAE,KAAK,IAAL;AAAP,KAA3B;AACD,GAHD;;AAKA,EAAA,6BAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,cAAlC,CAAP;AACD,GAFD;;AAIA,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAmC;AAA5B,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,CAAiB,KAAK,IAAL,EAAjB;AAA4B;;AACjC,QAAI,IAAJ,EAAU;AACR,WAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,cAAlC;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,cAArC;AACD;;AAED,SAAK,QAAL,CAAc,OAAd,CAAsB,OAAO,CAAC,YAA9B,EAA4C,KAAG,IAA/C;AACD,GARD;;AASF,SAAA,6BAAA;AAAC,CA7CD,CAAmD,aAAnD,CAAA;;0CA+CA;;AACA,eAAe,6BAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MDCFoundation } from '@material/base/foundation';\r\nimport { cssClasses, strings } from './constants';\r\nvar MDCIconButtonToggleFoundation = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MDCIconButtonToggleFoundation, _super);\r\n    function MDCIconButtonToggleFoundation(adapter) {\r\n        return _super.call(this, tslib_1.__assign({}, MDCIconButtonToggleFoundation.defaultAdapter, adapter)) || this;\r\n    }\r\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"cssClasses\", {\r\n        get: function () {\r\n            return cssClasses;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"strings\", {\r\n        get: function () {\r\n            return strings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"defaultAdapter\", {\r\n        get: function () {\r\n            return {\r\n                addClass: function () { return undefined; },\r\n                hasClass: function () { return false; },\r\n                notifyChange: function () { return undefined; },\r\n                removeClass: function () { return undefined; },\r\n                setAttr: function () { return undefined; },\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MDCIconButtonToggleFoundation.prototype.init = function () {\r\n        this.adapter_.setAttr(strings.ARIA_PRESSED, \"\" + this.isOn());\r\n    };\r\n    MDCIconButtonToggleFoundation.prototype.handleClick = function () {\r\n        this.toggle();\r\n        this.adapter_.notifyChange({ isOn: this.isOn() });\r\n    };\r\n    MDCIconButtonToggleFoundation.prototype.isOn = function () {\r\n        return this.adapter_.hasClass(cssClasses.ICON_BUTTON_ON);\r\n    };\r\n    MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {\r\n        if (isOn === void 0) { isOn = !this.isOn(); }\r\n        if (isOn) {\r\n            this.adapter_.addClass(cssClasses.ICON_BUTTON_ON);\r\n        }\r\n        else {\r\n            this.adapter_.removeClass(cssClasses.ICON_BUTTON_ON);\r\n        }\r\n        this.adapter_.setAttr(strings.ARIA_PRESSED, \"\" + isOn);\r\n    };\r\n    return MDCIconButtonToggleFoundation;\r\n}(MDCFoundation));\r\nexport { MDCIconButtonToggleFoundation };\r\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\r\nexport default MDCIconButtonToggleFoundation;\r\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}