{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest, matches } from '@material/dom/ponyfill';\nimport { cssClasses, strings } from './constants';\nimport { MDCListFoundation } from './foundation';\n\nvar MDCList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCList, _super);\n\n  function MDCList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MDCList.prototype, \"vertical\", {\n    set: function (value) {\n      this.foundation_.setVerticalOrientation(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"listElements\", {\n    get: function () {\n      return [].slice.call(this.root_.querySelectorAll(\".\" + cssClasses.LIST_ITEM_CLASS));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"wrapFocus\", {\n    set: function (value) {\n      this.foundation_.setWrapFocus(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"singleSelection\", {\n    set: function (isSingleSelectionList) {\n      this.foundation_.setSingleSelection(isSingleSelectionList);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"selectedIndex\", {\n    get: function () {\n      return this.foundation_.getSelectedIndex();\n    },\n    set: function (index) {\n      this.foundation_.setSelectedIndex(index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCList.attachTo = function (root) {\n    return new MDCList(root);\n  };\n\n  MDCList.prototype.initialSyncWithDOM = function () {\n    this.handleClick_ = this.handleClickEvent_.bind(this);\n    this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\n    this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\n    this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\n    this.listen('keydown', this.handleKeydown_);\n    this.listen('click', this.handleClick_);\n    this.listen('focusin', this.focusInEventListener_);\n    this.listen('focusout', this.focusOutEventListener_);\n    this.layout();\n    this.initializeListType();\n  };\n\n  MDCList.prototype.destroy = function () {\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten('click', this.handleClick_);\n    this.unlisten('focusin', this.focusInEventListener_);\n    this.unlisten('focusout', this.focusOutEventListener_);\n  };\n\n  MDCList.prototype.layout = function () {\n    var direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);\n    this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL; // List items need to have at least tabindex=-1 to be focusable.\n\n    [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (el) {\n      el.setAttribute('tabindex', '-1');\n    }); // Child button/a elements are not tabbable until the list item is focused.\n\n    [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (el) {\n      return el.setAttribute('tabindex', '-1');\n    });\n    this.foundation_.layout();\n  };\n  /**\r\n   * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\r\n   */\n\n\n  MDCList.prototype.initializeListType = function () {\n    var _this = this;\n\n    var checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n    var singleSelectedListItem = this.root_.querySelector(\"\\n      .\" + cssClasses.LIST_ITEM_ACTIVATED_CLASS + \",\\n      .\" + cssClasses.LIST_ITEM_SELECTED_CLASS + \"\\n    \");\n    var radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n\n    if (checkboxListItems.length) {\n      var preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n      this.selectedIndex = [].map.call(preselectedItems, function (listItem) {\n        return _this.listElements.indexOf(listItem);\n      });\n    } else if (singleSelectedListItem) {\n      if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\n        this.foundation_.setUseActivatedClass(true);\n      }\n\n      this.singleSelection = true;\n      this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\n    } else if (radioSelectedListItem) {\n      this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n    }\n  };\n  /**\r\n   * Updates the list item at itemIndex to the desired isEnabled state.\r\n   * @param itemIndex Index of the list item\r\n   * @param isEnabled Sets the list item to enabled or disabled.\r\n   */\n\n\n  MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\n    this.foundation_.setEnabled(itemIndex, isEnabled);\n  };\n\n  MDCList.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.add(className);\n        }\n      },\n      focusItemAtIndex: function (index) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.focus();\n        }\n      },\n      getAttributeForElementIndex: function (index, attr) {\n        return _this.listElements[index].getAttribute(attr);\n      },\n      getFocusedElementIndex: function () {\n        return _this.listElements.indexOf(document.activeElement);\n      },\n      getListItemCount: function () {\n        return _this.listElements.length;\n      },\n      hasCheckboxAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n      },\n      hasRadioAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\n      },\n      isCheckboxCheckedAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n        return toggleEl.checked;\n      },\n      isFocusInsideList: function () {\n        return _this.root_.contains(document.activeElement);\n      },\n      isRootFocused: function () {\n        return document.activeElement === _this.root_;\n      },\n      listItemAtIndexHasClass: function (index, className) {\n        return _this.listElements[index].classList.contains(className);\n      },\n      notifyAction: function (index) {\n        _this.emit(strings.ACTION_EVENT, {\n          index: index\n        },\n        /** shouldBubble */\n        true);\n      },\n      removeClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.remove(className);\n        }\n      },\n      setAttributeForElementIndex: function (index, attr, value) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.setAttribute(attr, value);\n        }\n      },\n      setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n        toggleEl.checked = isChecked;\n        var event = document.createEvent('Event');\n        event.initEvent('change', true, true);\n        toggleEl.dispatchEvent(event);\n      },\n      setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\n        var element = _this.listElements[listItemIndex];\n        var listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\n        listItemChildren.forEach(function (el) {\n          return el.setAttribute('tabindex', tabIndexValue);\n        });\n      }\n    };\n    return new MDCListFoundation(adapter);\n  };\n  /**\r\n   * Used to figure out which list item this event is targetting. Or returns -1 if\r\n   * there is no list item\r\n   */\n\n\n  MDCList.prototype.getListItemIndex_ = function (evt) {\n    var eventTarget = evt.target;\n    var nearestParent = closest(eventTarget, \".\" + cssClasses.LIST_ITEM_CLASS + \", .\" + cssClasses.ROOT); // Get the index of the element if it is a list item.\n\n    if (nearestParent && matches(nearestParent, \".\" + cssClasses.LIST_ITEM_CLASS)) {\n      return this.listElements.indexOf(nearestParent);\n    }\n\n    return -1;\n  };\n  /**\r\n   * Used to figure out which element was clicked before sending the event to the foundation.\r\n   */\n\n\n  MDCList.prototype.handleFocusInEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusIn(evt, index);\n  };\n  /**\r\n   * Used to figure out which element was clicked before sending the event to the foundation.\r\n   */\n\n\n  MDCList.prototype.handleFocusOutEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusOut(evt, index);\n  };\n  /**\r\n   * Used to figure out which element was focused when keydown event occurred before sending the event to the\r\n   * foundation.\r\n   */\n\n\n  MDCList.prototype.handleKeydownEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    var target = evt.target;\n    this.foundation_.handleKeydown(evt, target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);\n  };\n  /**\r\n   * Used to figure out which element was clicked before sending the event to the foundation.\r\n   */\n\n\n  MDCList.prototype.handleClickEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    var target = evt.target; // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\n\n    var toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);\n    this.foundation_.handleClick(index, toggleCheckbox);\n  };\n\n  return MDCList;\n}(MDCComponent);\n\nexport { MDCList };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,YAAR,QAA2B,0BAA3B;AAEA,SAAQ,OAAR,EAAiB,OAAjB,QAA+B,wBAA/B;AAEA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,aAAlC;AACA,SAAQ,iBAAR,QAAgC,cAAhC;;AAKA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,EAAA,MAAA;;AAA7B,WAAA,OAAA,GAAA;;AAuOC;;AAtOC,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;SAAZ,UAAa,KAAb,EAA2B;AACzB,WAAK,WAAL,CAAiB,sBAAjB,CAAwC,KAAxC;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;SAAhB,YAAA;AACE,aAAO,GAAG,KAAH,CAAS,IAAT,CAAc,KAAK,KAAL,CAAW,gBAAX,CAA4B,MAAI,UAAU,CAAC,eAA3C,CAAd,CAAP;AACD,KAFe;oBAAA;;AAAA,GAAhB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,UAAc,KAAd,EAA4B;AAC1B,WAAK,WAAL,CAAiB,YAAjB,CAA8B,KAA9B;AACD,KAFY;oBAAA;;AAAA,GAAb;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;SAAnB,UAAoB,qBAApB,EAAkD;AAChD,WAAK,WAAL,CAAiB,kBAAjB,CAAoC,qBAApC;AACD,KAFkB;oBAAA;;AAAA,GAAnB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;SAAjB,YAAA;AACE,aAAO,KAAK,WAAL,CAAiB,gBAAjB,EAAP;AACD,KAFgB;SAIjB,UAAkB,KAAlB,EAAqC;AACnC,WAAK,WAAL,CAAiB,gBAAjB,CAAkC,KAAlC;AACD,KANgB;oBAAA;;AAAA,GAAjB;;AAQO,EAAA,OAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA6B;AAC3B,WAAO,IAAI,OAAJ,CAAY,IAAZ,CAAP;AACD,GAFM;;AASP,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,SAAK,YAAL,GAAoB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAApB;AACA,SAAK,cAAL,GAAsB,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAAtB;AACA,SAAK,qBAAL,GAA6B,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA7B;AACA,SAAK,sBAAL,GAA8B,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B,CAA9B;AACA,SAAK,MAAL,CAAY,SAAZ,EAAuB,KAAK,cAA5B;AACA,SAAK,MAAL,CAAY,OAAZ,EAAqB,KAAK,YAA1B;AACA,SAAK,MAAL,CAAY,SAAZ,EAAuB,KAAK,qBAA5B;AACA,SAAK,MAAL,CAAY,UAAZ,EAAwB,KAAK,sBAA7B;AACA,SAAK,MAAL;AACA,SAAK,kBAAL;AACD,GAXD;;AAaA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,SAAd,EAAyB,KAAK,cAA9B;AACA,SAAK,QAAL,CAAc,OAAd,EAAuB,KAAK,YAA5B;AACA,SAAK,QAAL,CAAc,SAAd,EAAyB,KAAK,qBAA9B;AACA,SAAK,QAAL,CAAc,UAAd,EAA0B,KAAK,sBAA/B;AACD,GALD;;AAOA,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,SAAS,GAAG,KAAK,KAAL,CAAW,YAAX,CAAwB,OAAO,CAAC,gBAAhC,CAAlB;AACA,SAAK,QAAL,GAAgB,SAAS,KAAK,OAAO,CAAC,2BAAtC,CAFF,CAIE;;AACA,OAAG,KAAH,CAAS,IAAT,CAAc,KAAK,KAAL,CAAW,gBAAX,CAA4B,gCAA5B,CAAd,EACK,OADL,CACa,UAAC,EAAD,EAAY;AACnB,MAAA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAA4B,IAA5B;AACD,KAHL,EALF,CAUE;;AACA,OAAG,KAAH,CAAS,IAAT,CAAc,KAAK,KAAL,CAAW,gBAAX,CAA4B,OAAO,CAAC,wBAApC,CAAd,EACK,OADL,CACa,UAAC,EAAD,EAAY;AAAK,aAAA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAAA,IAAA,CAAA;AAAiC,KAD/D;AAGA,SAAK,WAAL,CAAiB,MAAjB;AACD,GAfD;AAiBA;;AAEG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,iBAAiB,GAAG,KAAK,KAAL,CAAW,gBAAX,CAA4B,OAAO,CAAC,2BAApC,CAA1B;AACA,QAAM,sBAAsB,GAAG,KAAK,KAAL,CAAW,aAAX,CAAyB,cACnD,UAAU,CAAC,yBADwC,GACf,YADe,GAEnD,UAAU,CAAC,wBAFwC,GAEhB,QAFT,CAA/B;AAIA,QAAM,qBAAqB,GAAG,KAAK,KAAL,CAAW,aAAX,CAAyB,OAAO,CAAC,2BAAjC,CAA9B;;AAEA,QAAI,iBAAiB,CAAC,MAAtB,EAA8B;AAC5B,UAAM,gBAAgB,GAAG,KAAK,KAAL,CAAW,gBAAX,CAA4B,OAAO,CAAC,8BAApC,CAAzB;AACA,WAAK,aAAL,GACI,GAAG,GAAH,CAAO,IAAP,CAAY,gBAAZ,EAA8B,UAAC,QAAD,EAAkB;AAAK,eAAA,KAAI,CAAC,YAAL,CAAkB,OAAlB,CAAA,QAAA,CAAA;AAAmC,OAAxF,CADJ;AAED,KAJD,MAIO,IAAI,sBAAJ,EAA4B;AACjC,UAAI,sBAAsB,CAAC,SAAvB,CAAiC,QAAjC,CAA0C,UAAU,CAAC,yBAArD,CAAJ,EAAqF;AACnF,aAAK,WAAL,CAAiB,oBAAjB,CAAsC,IAAtC;AACD;;AAED,WAAK,eAAL,GAAuB,IAAvB;AACA,WAAK,aAAL,GAAqB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,sBAA1B,CAArB;AACD,KAPM,MAOA,IAAI,qBAAJ,EAA2B;AAChC,WAAK,aAAL,GAAqB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,qBAA1B,CAArB;AACD;AACF,GAtBD;AAwBA;;;;AAIG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,SAAX,EAA8B,SAA9B,EAAgD;AAC9C,SAAK,WAAL,CAAiB,UAAjB,CAA4B,SAA5B,EAAuC,SAAvC;AACD,GAFD;;AAIA,EAAA,OAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;;;AACA,QAAM,OAAO,GAAmB;AAC9B,MAAA,uBAAuB,EAAE,UAAC,KAAD,EAAQ,SAAR,EAAiB;AACxC,YAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAhB;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,SAAtB;AACD;AACF,OAN6B;AAO9B,MAAA,gBAAgB,EAAE,UAAC,KAAD,EAAM;AACtB,YAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAhB;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,OAAO,CAAC,KAAR;AACD;AACF,OAZ6B;AAa9B,MAAA,2BAA2B,EAAE,UAAC,KAAD,EAAQ,IAAR,EAAY;AAAK,eAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,YAAzB,CAAA,IAAA,CAAA;AAA2C,OAb3D;AAc9B,MAAA,sBAAsB,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,YAAL,CAAkB,OAAlB,CAA0B,QAAQ,CAAlC,aAAA,CAAA;AAAkD,OAdlD;AAe9B,MAAA,gBAAgB,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,YAAL,CAAA,MAAA;AAAwB,OAflB;AAgB9B,MAAA,kBAAkB,EAAE,UAAC,KAAD,EAAM;AACxB,YAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAjB;AACA,eAAO,CAAC,CAAC,QAAQ,CAAC,aAAT,CAAuB,OAAO,CAAC,iBAA/B,CAAT;AACD,OAnB6B;AAoB9B,MAAA,eAAe,EAAE,UAAC,KAAD,EAAM;AACrB,YAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAjB;AACA,eAAO,CAAC,CAAC,QAAQ,CAAC,aAAT,CAAuB,OAAO,CAAC,cAA/B,CAAT;AACD,OAvB6B;AAwB9B,MAAA,wBAAwB,EAAE,UAAC,KAAD,EAAM;AAC9B,YAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAjB;AACA,YAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAyC,OAAO,CAAC,iBAAjD,CAAjB;AACA,eAAO,QAAS,CAAC,OAAjB;AACD,OA5B6B;AA6B9B,MAAA,iBAAiB,EAAE,YAAA;AACjB,eAAO,KAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,QAAQ,CAAC,aAA7B,CAAP;AACD,OA/B6B;AAgC9B,MAAA,aAAa,EAAE,YAAA;AAAM,eAAA,QAAQ,CAAC,aAAT,KAA2B,KAAI,CAA/B,KAAA;AAAqC,OAhC5B;AAiC9B,MAAA,uBAAuB,EAAE,UAAC,KAAD,EAAQ,SAAR,EAAiB;AAAK,eAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,SAAzB,CAAmC,QAAnC,CAAA,SAAA,CAAA;AAAsD,OAjCvE;AAkC9B,MAAA,YAAY,EAAE,UAAC,KAAD,EAAM;AAClB,QAAA,KAAI,CAAC,IAAL,CAAoC,OAAO,CAAC,YAA5C,EAA0D;AAAC,UAAA,KAAK,EAAA;AAAN,SAA1D;AAAmE;AAAoB,YAAvF;AACD,OApC6B;AAqC9B,MAAA,0BAA0B,EAAE,UAAC,KAAD,EAAQ,SAAR,EAAiB;AAC3C,YAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAhB;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB,CAAyB,SAAzB;AACD;AACF,OA1C6B;AA2C9B,MAAA,2BAA2B,EAAE,UAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAmB;AAC9C,YAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAhB;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,OAAO,CAAC,YAAR,CAAqB,IAArB,EAA2B,KAA3B;AACD;AACF,OAhD6B;AAiD9B,MAAA,gCAAgC,EAAE,UAAC,KAAD,EAAQ,SAAR,EAAiB;AACjD,YAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAjB;AACA,YAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAyC,OAAO,CAAC,uBAAjD,CAAjB;AACA,QAAA,QAAS,CAAC,OAAV,GAAoB,SAApB;AAEA,YAAM,KAAK,GAAG,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAAd;AACA,QAAA,KAAK,CAAC,SAAN,CAAgB,QAAhB,EAA0B,IAA1B,EAAgC,IAAhC;AACA,QAAA,QAAS,CAAC,aAAV,CAAwB,KAAxB;AACD,OAzD6B;AA0D9B,MAAA,8BAA8B,EAAE,UAAC,aAAD,EAAgB,aAAhB,EAA6B;AAC3D,YAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,aAAlB,CAAhB;AACA,YAAM,gBAAgB,GAClB,GAAG,KAAH,CAAS,IAAT,CAAc,OAAO,CAAC,gBAAR,CAAyB,OAAO,CAAC,iCAAjC,CAAd,CADJ;AAEA,QAAA,gBAAgB,CAAC,OAAjB,CAAyB,UAAC,EAAD,EAAG;AAAK,iBAAA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAAA,aAAA,CAAA;AAA0C,SAA3E;AACD;AA/D6B,KAAhC;AAiEA,WAAO,IAAI,iBAAJ,CAAsB,OAAtB,CAAP;AACD,GArED;AAuEA;;;AAGG;;;AACK,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,GAA1B,EAAoC;AAClC,QAAM,WAAW,GAAG,GAAG,CAAC,MAAxB;AACA,QAAM,aAAa,GAAG,OAAO,CAAC,WAAD,EAAc,MAAI,UAAU,CAAC,eAAf,GAA8B,KAA9B,GAAoC,UAAU,CAAC,IAA7D,CAA7B,CAFkC,CAIlC;;AACA,QAAI,aAAa,IAAI,OAAO,CAAC,aAAD,EAAgB,MAAI,UAAU,CAAC,eAA/B,CAA5B,EAA+E;AAC7E,aAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,aAA1B,CAAP;AACD;;AAED,WAAO,CAAC,CAAR;AACD,GAVO;AAYR;;AAEG;;;AACK,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,GAA5B,EAA2C;AACzC,QAAM,KAAK,GAAG,KAAK,iBAAL,CAAuB,GAAvB,CAAd;AACA,SAAK,WAAL,CAAiB,aAAjB,CAA+B,GAA/B,EAAoC,KAApC;AACD,GAHO;AAKR;;AAEG;;;AACK,EAAA,OAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,GAA7B,EAA4C;AAC1C,QAAM,KAAK,GAAG,KAAK,iBAAL,CAAuB,GAAvB,CAAd;AACA,SAAK,WAAL,CAAiB,cAAjB,CAAgC,GAAhC,EAAqC,KAArC;AACD,GAHO;AAKR;;;AAGG;;;AACK,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,GAA5B,EAA8C;AAC5C,QAAM,KAAK,GAAG,KAAK,iBAAL,CAAuB,GAAvB,CAAd;AACA,QAAM,MAAM,GAAG,GAAG,CAAC,MAAnB;AACA,SAAK,WAAL,CAAiB,aAAjB,CAA+B,GAA/B,EAAoC,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,UAAU,CAAC,eAArC,CAApC,EAA2F,KAA3F;AACD,GAJO;AAMR;;AAEG;;;AACK,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,GAA1B,EAAyC;AACvC,QAAM,KAAK,GAAG,KAAK,iBAAL,CAAuB,GAAvB,CAAd;AACA,QAAM,MAAM,GAAG,GAAG,CAAC,MAAnB,CAFuC,CAIvC;;AACA,QAAM,cAAc,GAAG,CAAC,OAAO,CAAC,MAAD,EAAS,OAAO,CAAC,uBAAjB,CAA/B;AACA,SAAK,WAAL,CAAiB,WAAjB,CAA6B,KAA7B,EAAoC,cAApC;AACD,GAPO;;AAQV,SAAA,OAAA;AAAC,CAvOD,CAA6B,YAA7B,CAAA","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MDCComponent } from '@material/base/component';\r\nimport { closest, matches } from '@material/dom/ponyfill';\r\nimport { cssClasses, strings } from './constants';\r\nimport { MDCListFoundation } from './foundation';\r\nvar MDCList = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MDCList, _super);\r\n    function MDCList() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(MDCList.prototype, \"vertical\", {\r\n        set: function (value) {\r\n            this.foundation_.setVerticalOrientation(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCList.prototype, \"listElements\", {\r\n        get: function () {\r\n            return [].slice.call(this.root_.querySelectorAll(\".\" + cssClasses.LIST_ITEM_CLASS));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCList.prototype, \"wrapFocus\", {\r\n        set: function (value) {\r\n            this.foundation_.setWrapFocus(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCList.prototype, \"singleSelection\", {\r\n        set: function (isSingleSelectionList) {\r\n            this.foundation_.setSingleSelection(isSingleSelectionList);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCList.prototype, \"selectedIndex\", {\r\n        get: function () {\r\n            return this.foundation_.getSelectedIndex();\r\n        },\r\n        set: function (index) {\r\n            this.foundation_.setSelectedIndex(index);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MDCList.attachTo = function (root) {\r\n        return new MDCList(root);\r\n    };\r\n    MDCList.prototype.initialSyncWithDOM = function () {\r\n        this.handleClick_ = this.handleClickEvent_.bind(this);\r\n        this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\r\n        this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\r\n        this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\r\n        this.listen('keydown', this.handleKeydown_);\r\n        this.listen('click', this.handleClick_);\r\n        this.listen('focusin', this.focusInEventListener_);\r\n        this.listen('focusout', this.focusOutEventListener_);\r\n        this.layout();\r\n        this.initializeListType();\r\n    };\r\n    MDCList.prototype.destroy = function () {\r\n        this.unlisten('keydown', this.handleKeydown_);\r\n        this.unlisten('click', this.handleClick_);\r\n        this.unlisten('focusin', this.focusInEventListener_);\r\n        this.unlisten('focusout', this.focusOutEventListener_);\r\n    };\r\n    MDCList.prototype.layout = function () {\r\n        var direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);\r\n        this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;\r\n        // List items need to have at least tabindex=-1 to be focusable.\r\n        [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])'))\r\n            .forEach(function (el) {\r\n            el.setAttribute('tabindex', '-1');\r\n        });\r\n        // Child button/a elements are not tabbable until the list item is focused.\r\n        [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS))\r\n            .forEach(function (el) { return el.setAttribute('tabindex', '-1'); });\r\n        this.foundation_.layout();\r\n    };\r\n    /**\r\n     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\r\n     */\r\n    MDCList.prototype.initializeListType = function () {\r\n        var _this = this;\r\n        var checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\r\n        var singleSelectedListItem = this.root_.querySelector(\"\\n      .\" + cssClasses.LIST_ITEM_ACTIVATED_CLASS + \",\\n      .\" + cssClasses.LIST_ITEM_SELECTED_CLASS + \"\\n    \");\r\n        var radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\r\n        if (checkboxListItems.length) {\r\n            var preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\r\n            this.selectedIndex =\r\n                [].map.call(preselectedItems, function (listItem) { return _this.listElements.indexOf(listItem); });\r\n        }\r\n        else if (singleSelectedListItem) {\r\n            if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\r\n                this.foundation_.setUseActivatedClass(true);\r\n            }\r\n            this.singleSelection = true;\r\n            this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\r\n        }\r\n        else if (radioSelectedListItem) {\r\n            this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\r\n        }\r\n    };\r\n    /**\r\n     * Updates the list item at itemIndex to the desired isEnabled state.\r\n     * @param itemIndex Index of the list item\r\n     * @param isEnabled Sets the list item to enabled or disabled.\r\n     */\r\n    MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\r\n        this.foundation_.setEnabled(itemIndex, isEnabled);\r\n    };\r\n    MDCList.prototype.getDefaultFoundation = function () {\r\n        var _this = this;\r\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\r\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\r\n        var adapter = {\r\n            addClassForElementIndex: function (index, className) {\r\n                var element = _this.listElements[index];\r\n                if (element) {\r\n                    element.classList.add(className);\r\n                }\r\n            },\r\n            focusItemAtIndex: function (index) {\r\n                var element = _this.listElements[index];\r\n                if (element) {\r\n                    element.focus();\r\n                }\r\n            },\r\n            getAttributeForElementIndex: function (index, attr) { return _this.listElements[index].getAttribute(attr); },\r\n            getFocusedElementIndex: function () { return _this.listElements.indexOf(document.activeElement); },\r\n            getListItemCount: function () { return _this.listElements.length; },\r\n            hasCheckboxAtIndex: function (index) {\r\n                var listItem = _this.listElements[index];\r\n                return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\r\n            },\r\n            hasRadioAtIndex: function (index) {\r\n                var listItem = _this.listElements[index];\r\n                return !!listItem.querySelector(strings.RADIO_SELECTOR);\r\n            },\r\n            isCheckboxCheckedAtIndex: function (index) {\r\n                var listItem = _this.listElements[index];\r\n                var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\r\n                return toggleEl.checked;\r\n            },\r\n            isFocusInsideList: function () {\r\n                return _this.root_.contains(document.activeElement);\r\n            },\r\n            isRootFocused: function () { return document.activeElement === _this.root_; },\r\n            listItemAtIndexHasClass: function (index, className) { return _this.listElements[index].classList.contains(className); },\r\n            notifyAction: function (index) {\r\n                _this.emit(strings.ACTION_EVENT, { index: index }, /** shouldBubble */ true);\r\n            },\r\n            removeClassForElementIndex: function (index, className) {\r\n                var element = _this.listElements[index];\r\n                if (element) {\r\n                    element.classList.remove(className);\r\n                }\r\n            },\r\n            setAttributeForElementIndex: function (index, attr, value) {\r\n                var element = _this.listElements[index];\r\n                if (element) {\r\n                    element.setAttribute(attr, value);\r\n                }\r\n            },\r\n            setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\r\n                var listItem = _this.listElements[index];\r\n                var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\r\n                toggleEl.checked = isChecked;\r\n                var event = document.createEvent('Event');\r\n                event.initEvent('change', true, true);\r\n                toggleEl.dispatchEvent(event);\r\n            },\r\n            setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\r\n                var element = _this.listElements[listItemIndex];\r\n                var listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\r\n                listItemChildren.forEach(function (el) { return el.setAttribute('tabindex', tabIndexValue); });\r\n            },\r\n        };\r\n        return new MDCListFoundation(adapter);\r\n    };\r\n    /**\r\n     * Used to figure out which list item this event is targetting. Or returns -1 if\r\n     * there is no list item\r\n     */\r\n    MDCList.prototype.getListItemIndex_ = function (evt) {\r\n        var eventTarget = evt.target;\r\n        var nearestParent = closest(eventTarget, \".\" + cssClasses.LIST_ITEM_CLASS + \", .\" + cssClasses.ROOT);\r\n        // Get the index of the element if it is a list item.\r\n        if (nearestParent && matches(nearestParent, \".\" + cssClasses.LIST_ITEM_CLASS)) {\r\n            return this.listElements.indexOf(nearestParent);\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Used to figure out which element was clicked before sending the event to the foundation.\r\n     */\r\n    MDCList.prototype.handleFocusInEvent_ = function (evt) {\r\n        var index = this.getListItemIndex_(evt);\r\n        this.foundation_.handleFocusIn(evt, index);\r\n    };\r\n    /**\r\n     * Used to figure out which element was clicked before sending the event to the foundation.\r\n     */\r\n    MDCList.prototype.handleFocusOutEvent_ = function (evt) {\r\n        var index = this.getListItemIndex_(evt);\r\n        this.foundation_.handleFocusOut(evt, index);\r\n    };\r\n    /**\r\n     * Used to figure out which element was focused when keydown event occurred before sending the event to the\r\n     * foundation.\r\n     */\r\n    MDCList.prototype.handleKeydownEvent_ = function (evt) {\r\n        var index = this.getListItemIndex_(evt);\r\n        var target = evt.target;\r\n        this.foundation_.handleKeydown(evt, target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);\r\n    };\r\n    /**\r\n     * Used to figure out which element was clicked before sending the event to the foundation.\r\n     */\r\n    MDCList.prototype.handleClickEvent_ = function (evt) {\r\n        var index = this.getListItemIndex_(evt);\r\n        var target = evt.target;\r\n        // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\r\n        var toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);\r\n        this.foundation_.handleClick(index, toggleCheckbox);\r\n    };\r\n    return MDCList;\r\n}(MDCComponent));\r\nexport { MDCList };\r\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}