{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React, { useMemo } from 'react';\nimport { toDashCase, parseThemeOptions, wrapChild, createComponent, Tag, useClassNames } from '@rmwc/base';\nimport { getAutoColorsForTheme } from './utils';\n/** A Theme Component. */\n\nexport var Theme = createComponent(function Theme(props, ref) {\n  var use = props.use,\n      wrap = props.wrap,\n      rest = __rest(props, [\"use\", \"wrap\"]);\n\n  var className = useClassNames(props, [parseThemeOptions(use).join(' ')]);\n\n  if (wrap) {\n    return wrapChild(__assign(__assign({}, rest), {\n      ref: ref,\n      className: className\n    }));\n  }\n\n  return React.createElement(Tag, __assign({\n    tag: \"span\",\n    theme: use\n  }, rest, {\n    ref: ref,\n    className: className\n  }));\n});\n/** A ThemeProvider. This sets theme colors for its child tree. */\n\nexport var ThemeProvider = createComponent(function ThemeProvider(props, ref) {\n  var _a, _b;\n\n  var parsed = JSON.stringify(props.options);\n  var colors = useMemo(function () {\n    var processedColors = Object.keys(props.options).reduce(function (acc, key) {\n      var val = props.options[key];\n      key = key.startsWith('--') ? key : \"--mdc-theme-\" + toDashCase(key);\n      acc[key] = val;\n      return acc;\n    }, {});\n    return getAutoColorsForTheme(processedColors); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parsed]);\n\n  var options = props.options,\n      _c = props.style,\n      style = _c === void 0 ? {} : _c,\n      wrap = props.wrap,\n      rest = __rest(props, [\"options\", \"style\", \"wrap\"]);\n\n  var className = useClassNames(props, [wrap && typeof rest.children === 'object' && ((_b = (_a = // @ts-ignore\n  rest.children) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.className)]);\n\n  var themeStyles = __assign(__assign({}, style), colors);\n\n  if (wrap && rest.children) {\n    return wrapChild(__assign(__assign({}, rest), {\n      style: themeStyles,\n      ref: ref\n    }));\n  }\n\n  return React.createElement(Tag, __assign({}, rest, {\n    style: themeStyles,\n    className: className,\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["C:/Users/diego/OneDrive/Documents/GitHub/dbprouno/Plataforma/FrontEnd/node_modules/@rmwc/theme/next/index.js"],"names":["__assign","__rest","React","useMemo","toDashCase","parseThemeOptions","wrapChild","createComponent","Tag","useClassNames","getAutoColorsForTheme","Theme","props","ref","use","wrap","rest","className","join","createElement","tag","theme","ThemeProvider","_a","_b","parsed","JSON","stringify","options","colors","processedColors","Object","keys","reduce","acc","key","val","startsWith","_c","style","children","themeStyles"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport React, { useMemo } from 'react';\nimport { toDashCase, parseThemeOptions, wrapChild, createComponent, Tag, useClassNames } from '@rmwc/base';\nimport { getAutoColorsForTheme } from './utils';\n/** A Theme Component. */\nexport var Theme = createComponent(function Theme(props, ref) {\n    var use = props.use, wrap = props.wrap, rest = __rest(props, [\"use\", \"wrap\"]);\n    var className = useClassNames(props, [parseThemeOptions(use).join(' ')]);\n    if (wrap) {\n        return wrapChild(__assign(__assign({}, rest), { ref: ref,\n            className: className }));\n    }\n    return (React.createElement(Tag, __assign({ tag: \"span\", theme: use }, rest, { ref: ref, className: className })));\n});\n/** A ThemeProvider. This sets theme colors for its child tree. */\nexport var ThemeProvider = createComponent(function ThemeProvider(props, ref) {\n    var _a, _b;\n    var parsed = JSON.stringify(props.options);\n    var colors = useMemo(function () {\n        var processedColors = Object.keys(props.options).reduce(function (acc, key) {\n            var val = props.options[key];\n            key = key.startsWith('--') ? key : \"--mdc-theme-\" + toDashCase(key);\n            acc[key] = val;\n            return acc;\n        }, {});\n        return getAutoColorsForTheme(processedColors);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [parsed]);\n    var options = props.options, _c = props.style, style = _c === void 0 ? {} : _c, wrap = props.wrap, rest = __rest(props, [\"options\", \"style\", \"wrap\"]);\n    var className = useClassNames(props, [\n        wrap &&\n            typeof rest.children === 'object' && ((_b = (_a = \n        // @ts-ignore\n        rest.children) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.className)\n    ]);\n    var themeStyles = __assign(__assign({}, style), colors);\n    if (wrap && rest.children) {\n        return wrapChild(__assign(__assign({}, rest), { style: themeStyles, ref: ref }));\n    }\n    return (React.createElement(Tag, __assign({}, rest, { style: themeStyles, className: className, ref: ref })));\n});\n"]},"metadata":{},"sourceType":"module"}