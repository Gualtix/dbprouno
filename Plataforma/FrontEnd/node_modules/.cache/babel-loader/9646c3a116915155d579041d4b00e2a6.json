{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\n\nfunction isNumberArray(selectedIndex) {\n  return selectedIndex instanceof Array;\n}\n\nvar MDCListFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCListFoundation, _super);\n\n  function MDCListFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCListFoundation.defaultAdapter, adapter)) || this;\n\n    _this.wrapFocus_ = false;\n    _this.isVertical_ = true;\n    _this.isSingleSelectionList_ = false;\n    _this.selectedIndex_ = numbers.UNSET_INDEX;\n    _this.focusedItemIndex_ = numbers.UNSET_INDEX;\n    _this.useActivatedClass_ = false;\n    _this.ariaCurrentAttrValue_ = null;\n    _this.isCheckboxList_ = false;\n    _this.isRadioList_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCListFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassForElementIndex: function () {\n          return undefined;\n        },\n        focusItemAtIndex: function () {\n          return undefined;\n        },\n        getAttributeForElementIndex: function () {\n          return null;\n        },\n        getFocusedElementIndex: function () {\n          return 0;\n        },\n        getListItemCount: function () {\n          return 0;\n        },\n        hasCheckboxAtIndex: function () {\n          return false;\n        },\n        hasRadioAtIndex: function () {\n          return false;\n        },\n        isCheckboxCheckedAtIndex: function () {\n          return false;\n        },\n        isFocusInsideList: function () {\n          return false;\n        },\n        isRootFocused: function () {\n          return false;\n        },\n        listItemAtIndexHasClass: function () {\n          return false;\n        },\n        notifyAction: function () {\n          return undefined;\n        },\n        removeClassForElementIndex: function () {\n          return undefined;\n        },\n        setAttributeForElementIndex: function () {\n          return undefined;\n        },\n        setCheckedCheckboxOrRadioAtIndex: function () {\n          return undefined;\n        },\n        setTabIndexForListItemChildren: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCListFoundation.prototype.layout = function () {\n    if (this.adapter_.getListItemCount() === 0) {\n      return;\n    }\n\n    if (this.adapter_.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList_ = true;\n    } else if (this.adapter_.hasRadioAtIndex(0)) {\n      this.isRadioList_ = true;\n    }\n  };\n  /**\r\n   * Sets the private wrapFocus_ variable.\r\n   */\n\n\n  MDCListFoundation.prototype.setWrapFocus = function (value) {\n    this.wrapFocus_ = value;\n  };\n  /**\r\n   * Sets the isVertical_ private variable.\r\n   */\n\n\n  MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n    this.isVertical_ = value;\n  };\n  /**\r\n   * Sets the isSingleSelectionList_ private variable.\r\n   */\n\n\n  MDCListFoundation.prototype.setSingleSelection = function (value) {\n    this.isSingleSelectionList_ = value;\n  };\n  /**\r\n   * Sets the useActivatedClass_ private variable.\r\n   */\n\n\n  MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n    this.useActivatedClass_ = useActivated;\n  };\n\n  MDCListFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex_;\n  };\n\n  MDCListFoundation.prototype.setSelectedIndex = function (index) {\n    if (!this.isIndexValid_(index)) {\n      return;\n    }\n\n    if (this.isCheckboxList_) {\n      this.setCheckboxAtIndex_(index);\n    } else if (this.isRadioList_) {\n      this.setRadioAtIndex_(index);\n    } else {\n      this.setSingleSelectionAtIndex_(index);\n    }\n  };\n  /**\r\n   * Focus in handler for the list items.\r\n   */\n\n\n  MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, '0');\n    }\n  };\n  /**\r\n   * Focus out handler for the list items.\r\n   */\n\n\n  MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {\n    var _this = this;\n\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, '-1');\n    }\n    /**\r\n     * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\r\n     * is moved to next element.\r\n     */\n\n\n    setTimeout(function () {\n      if (!_this.adapter_.isFocusInsideList()) {\n        _this.setTabindexToFirstSelectedItem_();\n      }\n    }, 0);\n  };\n  /**\r\n   * Key handler for the list.\r\n   */\n\n\n  MDCListFoundation.prototype.handleKeydown = function (evt, isRootListItem, listItemIndex) {\n    var isArrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;\n    var isArrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;\n    var isArrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;\n    var isArrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;\n    var isHome = evt.key === 'Home' || evt.keyCode === 36;\n    var isEnd = evt.key === 'End' || evt.keyCode === 35;\n    var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n    var isSpace = evt.key === 'Space' || evt.keyCode === 32;\n\n    if (this.adapter_.isRootFocused()) {\n      if (isArrowUp || isEnd) {\n        evt.preventDefault();\n        this.focusLastElement();\n      } else if (isArrowDown || isHome) {\n        evt.preventDefault();\n        this.focusFirstElement();\n      }\n\n      return;\n    }\n\n    var currentIndex = this.adapter_.getFocusedElementIndex();\n\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    var nextIndex;\n\n    if (this.isVertical_ && isArrowDown || !this.isVertical_ && isArrowRight) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusNextElement(currentIndex);\n    } else if (this.isVertical_ && isArrowUp || !this.isVertical_ && isArrowLeft) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusFirstElement();\n    } else if (isEnd) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusLastElement();\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n        var target = evt.target;\n\n        if (target && target.tagName === 'A' && isEnter) {\n          return;\n        }\n\n        this.preventDefaultEvent_(evt);\n\n        if (this.isSelectableList_()) {\n          this.setSelectedIndexOnAction_(currentIndex);\n        }\n\n        this.adapter_.notifyAction(currentIndex);\n      }\n    }\n\n    this.focusedItemIndex_ = currentIndex;\n\n    if (nextIndex !== undefined) {\n      this.setTabindexAtIndex_(nextIndex);\n      this.focusedItemIndex_ = nextIndex;\n    }\n  };\n  /**\r\n   * Click handler for the list.\r\n   */\n\n\n  MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n    if (index === numbers.UNSET_INDEX) {\n      return;\n    }\n\n    if (this.isSelectableList_()) {\n      this.setSelectedIndexOnAction_(index, toggleCheckbox);\n    }\n\n    this.adapter_.notifyAction(index);\n    this.setTabindexAtIndex_(index);\n    this.focusedItemIndex_ = index;\n  };\n  /**\r\n   * Focuses the next element on the list.\r\n   */\n\n\n  MDCListFoundation.prototype.focusNextElement = function (index) {\n    var count = this.adapter_.getListItemCount();\n    var nextIndex = index + 1;\n\n    if (nextIndex >= count) {\n      if (this.wrapFocus_) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n\n    this.adapter_.focusItemAtIndex(nextIndex);\n    return nextIndex;\n  };\n  /**\r\n   * Focuses the previous element on the list.\r\n   */\n\n\n  MDCListFoundation.prototype.focusPrevElement = function (index) {\n    var prevIndex = index - 1;\n\n    if (prevIndex < 0) {\n      if (this.wrapFocus_) {\n        prevIndex = this.adapter_.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n\n    this.adapter_.focusItemAtIndex(prevIndex);\n    return prevIndex;\n  };\n\n  MDCListFoundation.prototype.focusFirstElement = function () {\n    this.adapter_.focusItemAtIndex(0);\n    return 0;\n  };\n\n  MDCListFoundation.prototype.focusLastElement = function () {\n    var lastIndex = this.adapter_.getListItemCount() - 1;\n    this.adapter_.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  };\n  /**\r\n   * @param itemIndex Index of the list item\r\n   * @param isEnabled Sets the list item to enabled or disabled.\r\n   */\n\n\n  MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n    if (!this.isIndexValid_(itemIndex)) {\n      return;\n    }\n\n    if (isEnabled) {\n      this.adapter_.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter_.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n    } else {\n      this.adapter_.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter_.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n    }\n  };\n  /**\r\n   * Ensures that preventDefault is only called if the containing element doesn't\r\n   * consume the event, and it will cause an unintended scroll.\r\n   */\n\n\n  MDCListFoundation.prototype.preventDefaultEvent_ = function (evt) {\n    var target = evt.target;\n    var tagName = (\"\" + target.tagName).toLowerCase();\n\n    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n      evt.preventDefault();\n    }\n  };\n\n  MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {\n    if (this.selectedIndex_ === index) {\n      return;\n    }\n\n    var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n\n    if (this.useActivatedClass_) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n    }\n\n    this.adapter_.addClassForElementIndex(index, selectedClassName);\n    this.setAriaForSingleSelectionAtIndex_(index);\n    this.selectedIndex_ = index;\n  };\n  /**\r\n   * Sets aria attribute for single selection at given index.\r\n   */\n\n\n  MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {\n    // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.\n    if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n      this.ariaCurrentAttrValue_ = this.adapter_.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n    }\n\n    var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n    var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');\n    }\n\n    var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\n    this.adapter_.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n  };\n  /**\r\n   * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\r\n   */\n\n\n  MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {\n    this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\n    this.selectedIndex_ = index;\n  };\n\n  MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {\n    for (var i = 0; i < this.adapter_.getListItemCount(); i++) {\n      var isChecked = false;\n\n      if (index.indexOf(i) >= 0) {\n        isChecked = true;\n      }\n\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n      this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n    }\n\n    this.selectedIndex_ = index;\n  };\n\n  MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {\n    if (this.focusedItemIndex_ === numbers.UNSET_INDEX && index !== 0) {\n      // If no list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n      this.adapter_.setAttributeForElementIndex(0, 'tabindex', '-1');\n    } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n      this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', '-1');\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, 'tabindex', '0');\n  };\n  /**\r\n   * @return Return true if it is single selectin list, checkbox list or radio list.\r\n   */\n\n\n  MDCListFoundation.prototype.isSelectableList_ = function () {\n    return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n  };\n\n  MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {\n    var targetIndex = 0;\n\n    if (this.isSelectableList_()) {\n      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers.UNSET_INDEX) {\n        targetIndex = this.selectedIndex_;\n      } else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {\n        targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) {\n          return Math.min(currentIndex, minIndex);\n        });\n      }\n    }\n\n    this.setTabindexAtIndex_(targetIndex);\n  };\n\n  MDCListFoundation.prototype.isIndexValid_ = function (index) {\n    var _this = this;\n\n    if (index instanceof Array) {\n      if (!this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some(function (i) {\n          return _this.isIndexInRange_(i);\n        });\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n      }\n\n      return this.isIndexInRange_(index);\n    } else {\n      return false;\n    }\n  };\n\n  MDCListFoundation.prototype.isIndexInRange_ = function (index) {\n    var listSize = this.adapter_.getListItemCount();\n    return index >= 0 && index < listSize;\n  };\n  /**\r\n   * Sets selected index on user action, toggles checkbox / radio based on toggleCheckbox value.\r\n   * User interaction should not toggle list item(s) when disabled.\r\n   */\n\n\n  MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {\n    if (toggleCheckbox === void 0) {\n      toggleCheckbox = true;\n    }\n\n    if (this.adapter_.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n      return;\n    }\n\n    if (this.isCheckboxList_) {\n      this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n    } else {\n      this.setSelectedIndex(index);\n    }\n  };\n\n  MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {\n    var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);\n\n    if (toggleCheckbox) {\n      isChecked = !isChecked;\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false'); // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n\n    var selectedIndexes = this.selectedIndex_ === numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();\n\n    if (isChecked) {\n      selectedIndexes.push(index);\n    } else {\n      selectedIndexes = selectedIndexes.filter(function (i) {\n        return i !== index;\n      });\n    }\n\n    this.selectedIndex_ = selectedIndexes;\n  };\n\n  return MDCListFoundation;\n}(MDCFoundation);\n\nexport { MDCListFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCListFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MDCFoundation } from '@material/base/foundation';\r\nimport { cssClasses, numbers, strings } from './constants';\r\nvar ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\r\nfunction isNumberArray(selectedIndex) {\r\n    return selectedIndex instanceof Array;\r\n}\r\nvar MDCListFoundation = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MDCListFoundation, _super);\r\n    function MDCListFoundation(adapter) {\r\n        var _this = _super.call(this, tslib_1.__assign({}, MDCListFoundation.defaultAdapter, adapter)) || this;\r\n        _this.wrapFocus_ = false;\r\n        _this.isVertical_ = true;\r\n        _this.isSingleSelectionList_ = false;\r\n        _this.selectedIndex_ = numbers.UNSET_INDEX;\r\n        _this.focusedItemIndex_ = numbers.UNSET_INDEX;\r\n        _this.useActivatedClass_ = false;\r\n        _this.ariaCurrentAttrValue_ = null;\r\n        _this.isCheckboxList_ = false;\r\n        _this.isRadioList_ = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MDCListFoundation, \"strings\", {\r\n        get: function () {\r\n            return strings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCListFoundation, \"cssClasses\", {\r\n        get: function () {\r\n            return cssClasses;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCListFoundation, \"numbers\", {\r\n        get: function () {\r\n            return numbers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\r\n        get: function () {\r\n            return {\r\n                addClassForElementIndex: function () { return undefined; },\r\n                focusItemAtIndex: function () { return undefined; },\r\n                getAttributeForElementIndex: function () { return null; },\r\n                getFocusedElementIndex: function () { return 0; },\r\n                getListItemCount: function () { return 0; },\r\n                hasCheckboxAtIndex: function () { return false; },\r\n                hasRadioAtIndex: function () { return false; },\r\n                isCheckboxCheckedAtIndex: function () { return false; },\r\n                isFocusInsideList: function () { return false; },\r\n                isRootFocused: function () { return false; },\r\n                listItemAtIndexHasClass: function () { return false; },\r\n                notifyAction: function () { return undefined; },\r\n                removeClassForElementIndex: function () { return undefined; },\r\n                setAttributeForElementIndex: function () { return undefined; },\r\n                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },\r\n                setTabIndexForListItemChildren: function () { return undefined; },\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MDCListFoundation.prototype.layout = function () {\r\n        if (this.adapter_.getListItemCount() === 0) {\r\n            return;\r\n        }\r\n        if (this.adapter_.hasCheckboxAtIndex(0)) {\r\n            this.isCheckboxList_ = true;\r\n        }\r\n        else if (this.adapter_.hasRadioAtIndex(0)) {\r\n            this.isRadioList_ = true;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the private wrapFocus_ variable.\r\n     */\r\n    MDCListFoundation.prototype.setWrapFocus = function (value) {\r\n        this.wrapFocus_ = value;\r\n    };\r\n    /**\r\n     * Sets the isVertical_ private variable.\r\n     */\r\n    MDCListFoundation.prototype.setVerticalOrientation = function (value) {\r\n        this.isVertical_ = value;\r\n    };\r\n    /**\r\n     * Sets the isSingleSelectionList_ private variable.\r\n     */\r\n    MDCListFoundation.prototype.setSingleSelection = function (value) {\r\n        this.isSingleSelectionList_ = value;\r\n    };\r\n    /**\r\n     * Sets the useActivatedClass_ private variable.\r\n     */\r\n    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\r\n        this.useActivatedClass_ = useActivated;\r\n    };\r\n    MDCListFoundation.prototype.getSelectedIndex = function () {\r\n        return this.selectedIndex_;\r\n    };\r\n    MDCListFoundation.prototype.setSelectedIndex = function (index) {\r\n        if (!this.isIndexValid_(index)) {\r\n            return;\r\n        }\r\n        if (this.isCheckboxList_) {\r\n            this.setCheckboxAtIndex_(index);\r\n        }\r\n        else if (this.isRadioList_) {\r\n            this.setRadioAtIndex_(index);\r\n        }\r\n        else {\r\n            this.setSingleSelectionAtIndex_(index);\r\n        }\r\n    };\r\n    /**\r\n     * Focus in handler for the list items.\r\n     */\r\n    MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {\r\n        if (listItemIndex >= 0) {\r\n            this.adapter_.setTabIndexForListItemChildren(listItemIndex, '0');\r\n        }\r\n    };\r\n    /**\r\n     * Focus out handler for the list items.\r\n     */\r\n    MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {\r\n        var _this = this;\r\n        if (listItemIndex >= 0) {\r\n            this.adapter_.setTabIndexForListItemChildren(listItemIndex, '-1');\r\n        }\r\n        /**\r\n         * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\r\n         * is moved to next element.\r\n         */\r\n        setTimeout(function () {\r\n            if (!_this.adapter_.isFocusInsideList()) {\r\n                _this.setTabindexToFirstSelectedItem_();\r\n            }\r\n        }, 0);\r\n    };\r\n    /**\r\n     * Key handler for the list.\r\n     */\r\n    MDCListFoundation.prototype.handleKeydown = function (evt, isRootListItem, listItemIndex) {\r\n        var isArrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;\r\n        var isArrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;\r\n        var isArrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;\r\n        var isArrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;\r\n        var isHome = evt.key === 'Home' || evt.keyCode === 36;\r\n        var isEnd = evt.key === 'End' || evt.keyCode === 35;\r\n        var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\r\n        var isSpace = evt.key === 'Space' || evt.keyCode === 32;\r\n        if (this.adapter_.isRootFocused()) {\r\n            if (isArrowUp || isEnd) {\r\n                evt.preventDefault();\r\n                this.focusLastElement();\r\n            }\r\n            else if (isArrowDown || isHome) {\r\n                evt.preventDefault();\r\n                this.focusFirstElement();\r\n            }\r\n            return;\r\n        }\r\n        var currentIndex = this.adapter_.getFocusedElementIndex();\r\n        if (currentIndex === -1) {\r\n            currentIndex = listItemIndex;\r\n            if (currentIndex < 0) {\r\n                // If this event doesn't have a mdc-list-item ancestor from the\r\n                // current list (not from a sublist), return early.\r\n                return;\r\n            }\r\n        }\r\n        var nextIndex;\r\n        if ((this.isVertical_ && isArrowDown) || (!this.isVertical_ && isArrowRight)) {\r\n            this.preventDefaultEvent_(evt);\r\n            nextIndex = this.focusNextElement(currentIndex);\r\n        }\r\n        else if ((this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {\r\n            this.preventDefaultEvent_(evt);\r\n            nextIndex = this.focusPrevElement(currentIndex);\r\n        }\r\n        else if (isHome) {\r\n            this.preventDefaultEvent_(evt);\r\n            nextIndex = this.focusFirstElement();\r\n        }\r\n        else if (isEnd) {\r\n            this.preventDefaultEvent_(evt);\r\n            nextIndex = this.focusLastElement();\r\n        }\r\n        else if (isEnter || isSpace) {\r\n            if (isRootListItem) {\r\n                // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\r\n                var target = evt.target;\r\n                if (target && target.tagName === 'A' && isEnter) {\r\n                    return;\r\n                }\r\n                this.preventDefaultEvent_(evt);\r\n                if (this.isSelectableList_()) {\r\n                    this.setSelectedIndexOnAction_(currentIndex);\r\n                }\r\n                this.adapter_.notifyAction(currentIndex);\r\n            }\r\n        }\r\n        this.focusedItemIndex_ = currentIndex;\r\n        if (nextIndex !== undefined) {\r\n            this.setTabindexAtIndex_(nextIndex);\r\n            this.focusedItemIndex_ = nextIndex;\r\n        }\r\n    };\r\n    /**\r\n     * Click handler for the list.\r\n     */\r\n    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\r\n        if (index === numbers.UNSET_INDEX) {\r\n            return;\r\n        }\r\n        if (this.isSelectableList_()) {\r\n            this.setSelectedIndexOnAction_(index, toggleCheckbox);\r\n        }\r\n        this.adapter_.notifyAction(index);\r\n        this.setTabindexAtIndex_(index);\r\n        this.focusedItemIndex_ = index;\r\n    };\r\n    /**\r\n     * Focuses the next element on the list.\r\n     */\r\n    MDCListFoundation.prototype.focusNextElement = function (index) {\r\n        var count = this.adapter_.getListItemCount();\r\n        var nextIndex = index + 1;\r\n        if (nextIndex >= count) {\r\n            if (this.wrapFocus_) {\r\n                nextIndex = 0;\r\n            }\r\n            else {\r\n                // Return early because last item is already focused.\r\n                return index;\r\n            }\r\n        }\r\n        this.adapter_.focusItemAtIndex(nextIndex);\r\n        return nextIndex;\r\n    };\r\n    /**\r\n     * Focuses the previous element on the list.\r\n     */\r\n    MDCListFoundation.prototype.focusPrevElement = function (index) {\r\n        var prevIndex = index - 1;\r\n        if (prevIndex < 0) {\r\n            if (this.wrapFocus_) {\r\n                prevIndex = this.adapter_.getListItemCount() - 1;\r\n            }\r\n            else {\r\n                // Return early because first item is already focused.\r\n                return index;\r\n            }\r\n        }\r\n        this.adapter_.focusItemAtIndex(prevIndex);\r\n        return prevIndex;\r\n    };\r\n    MDCListFoundation.prototype.focusFirstElement = function () {\r\n        this.adapter_.focusItemAtIndex(0);\r\n        return 0;\r\n    };\r\n    MDCListFoundation.prototype.focusLastElement = function () {\r\n        var lastIndex = this.adapter_.getListItemCount() - 1;\r\n        this.adapter_.focusItemAtIndex(lastIndex);\r\n        return lastIndex;\r\n    };\r\n    /**\r\n     * @param itemIndex Index of the list item\r\n     * @param isEnabled Sets the list item to enabled or disabled.\r\n     */\r\n    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\r\n        if (!this.isIndexValid_(itemIndex)) {\r\n            return;\r\n        }\r\n        if (isEnabled) {\r\n            this.adapter_.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\r\n            this.adapter_.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\r\n        }\r\n        else {\r\n            this.adapter_.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\r\n            this.adapter_.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\r\n        }\r\n    };\r\n    /**\r\n     * Ensures that preventDefault is only called if the containing element doesn't\r\n     * consume the event, and it will cause an unintended scroll.\r\n     */\r\n    MDCListFoundation.prototype.preventDefaultEvent_ = function (evt) {\r\n        var target = evt.target;\r\n        var tagName = (\"\" + target.tagName).toLowerCase();\r\n        if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\r\n            evt.preventDefault();\r\n        }\r\n    };\r\n    MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {\r\n        if (this.selectedIndex_ === index) {\r\n            return;\r\n        }\r\n        var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\r\n        if (this.useActivatedClass_) {\r\n            selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\r\n        }\r\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\r\n            this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\r\n        }\r\n        this.adapter_.addClassForElementIndex(index, selectedClassName);\r\n        this.setAriaForSingleSelectionAtIndex_(index);\r\n        this.selectedIndex_ = index;\r\n    };\r\n    /**\r\n     * Sets aria attribute for single selection at given index.\r\n     */\r\n    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {\r\n        // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.\r\n        if (this.selectedIndex_ === numbers.UNSET_INDEX) {\r\n            this.ariaCurrentAttrValue_ =\r\n                this.adapter_.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\r\n        }\r\n        var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\r\n        var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\r\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\r\n            this.adapter_.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');\r\n        }\r\n        var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\r\n        this.adapter_.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\r\n    };\r\n    /**\r\n     * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\r\n     */\r\n    MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {\r\n        this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);\r\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\r\n            this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\r\n        }\r\n        this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\r\n        this.selectedIndex_ = index;\r\n    };\r\n    MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {\r\n        for (var i = 0; i < this.adapter_.getListItemCount(); i++) {\r\n            var isChecked = false;\r\n            if (index.indexOf(i) >= 0) {\r\n                isChecked = true;\r\n            }\r\n            this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\r\n            this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\r\n        }\r\n        this.selectedIndex_ = index;\r\n    };\r\n    MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {\r\n        if (this.focusedItemIndex_ === numbers.UNSET_INDEX && index !== 0) {\r\n            // If no list item was selected set first list item's tabindex to -1.\r\n            // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\r\n            this.adapter_.setAttributeForElementIndex(0, 'tabindex', '-1');\r\n        }\r\n        else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\r\n            this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', '-1');\r\n        }\r\n        this.adapter_.setAttributeForElementIndex(index, 'tabindex', '0');\r\n    };\r\n    /**\r\n     * @return Return true if it is single selectin list, checkbox list or radio list.\r\n     */\r\n    MDCListFoundation.prototype.isSelectableList_ = function () {\r\n        return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\r\n    };\r\n    MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {\r\n        var targetIndex = 0;\r\n        if (this.isSelectableList_()) {\r\n            if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers.UNSET_INDEX) {\r\n                targetIndex = this.selectedIndex_;\r\n            }\r\n            else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {\r\n                targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) { return Math.min(currentIndex, minIndex); });\r\n            }\r\n        }\r\n        this.setTabindexAtIndex_(targetIndex);\r\n    };\r\n    MDCListFoundation.prototype.isIndexValid_ = function (index) {\r\n        var _this = this;\r\n        if (index instanceof Array) {\r\n            if (!this.isCheckboxList_) {\r\n                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\r\n            }\r\n            if (index.length === 0) {\r\n                return true;\r\n            }\r\n            else {\r\n                return index.some(function (i) { return _this.isIndexInRange_(i); });\r\n            }\r\n        }\r\n        else if (typeof index === 'number') {\r\n            if (this.isCheckboxList_) {\r\n                throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\r\n            }\r\n            return this.isIndexInRange_(index);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    MDCListFoundation.prototype.isIndexInRange_ = function (index) {\r\n        var listSize = this.adapter_.getListItemCount();\r\n        return index >= 0 && index < listSize;\r\n    };\r\n    /**\r\n     * Sets selected index on user action, toggles checkbox / radio based on toggleCheckbox value.\r\n     * User interaction should not toggle list item(s) when disabled.\r\n     */\r\n    MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {\r\n        if (toggleCheckbox === void 0) { toggleCheckbox = true; }\r\n        if (this.adapter_.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\r\n            return;\r\n        }\r\n        if (this.isCheckboxList_) {\r\n            this.toggleCheckboxAtIndex_(index, toggleCheckbox);\r\n        }\r\n        else {\r\n            this.setSelectedIndex(index);\r\n        }\r\n    };\r\n    MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {\r\n        var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);\r\n        if (toggleCheckbox) {\r\n            isChecked = !isChecked;\r\n            this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\r\n        }\r\n        this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\r\n        // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\r\n        var selectedIndexes = this.selectedIndex_ === numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();\r\n        if (isChecked) {\r\n            selectedIndexes.push(index);\r\n        }\r\n        else {\r\n            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });\r\n        }\r\n        this.selectedIndex_ = selectedIndexes;\r\n    };\r\n    return MDCListFoundation;\r\n}(MDCFoundation));\r\nexport { MDCListFoundation };\r\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\r\nexport default MDCListFoundation;\r\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}