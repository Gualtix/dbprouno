{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from '../constants';\n\nvar MDCDismissibleDrawerFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDismissibleDrawerFoundation, _super);\n\n  function MDCDismissibleDrawerFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;\n\n    _this.animationFrame_ = 0;\n    _this.animationTimer_ = 0;\n    return _this;\n  }\n\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        elementHasClass: function () {\n          return false;\n        },\n        notifyClose: function () {\n          return undefined;\n        },\n        notifyOpen: function () {\n          return undefined;\n        },\n        saveFocus: function () {\n          return undefined;\n        },\n        restoreFocus: function () {\n          return undefined;\n        },\n        focusActiveNavigationItem: function () {\n          return undefined;\n        },\n        trapFocus: function () {\n          return undefined;\n        },\n        releaseFocus: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDismissibleDrawerFoundation.prototype.destroy = function () {\n    if (this.animationFrame_) {\n      cancelAnimationFrame(this.animationFrame_);\n    }\n\n    if (this.animationTimer_) {\n      clearTimeout(this.animationTimer_);\n    }\n  };\n  /**\r\n   * Opens the drawer from the closed state.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.open = function () {\n    var _this = this;\n\n    if (this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.OPEN);\n    this.adapter_.addClass(cssClasses.ANIMATE); // Wait a frame once display is no longer \"none\", to establish basis for animation\n\n    this.runNextAnimationFrame_(function () {\n      _this.adapter_.addClass(cssClasses.OPENING);\n    });\n    this.adapter_.saveFocus();\n  };\n  /**\r\n   * Closes the drawer from the open state.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.close = function () {\n    if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.CLOSING);\n  };\n  /**\r\n   * Returns true if the drawer is in the open position.\r\n   * @return true if drawer is in open state.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\n    return this.adapter_.hasClass(cssClasses.OPEN);\n  };\n  /**\r\n   * Returns true if the drawer is animating open.\r\n   * @return true if drawer is animating open.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\n    return this.adapter_.hasClass(cssClasses.OPENING) || this.adapter_.hasClass(cssClasses.ANIMATE);\n  };\n  /**\r\n   * Returns true if the drawer is animating closed.\r\n   * @return true if drawer is animating closed.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\n    return this.adapter_.hasClass(cssClasses.CLOSING);\n  };\n  /**\r\n   * Keydown handler to close drawer when key is escape.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\n    var keyCode = evt.keyCode,\n        key = evt.key;\n    var isEscape = key === 'Escape' || keyCode === 27;\n\n    if (isEscape) {\n      this.close();\n    }\n  };\n  /**\r\n   * Handles the `transitionend` event when the drawer finishes opening/closing.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\n    var OPENING = cssClasses.OPENING,\n        CLOSING = cssClasses.CLOSING,\n        OPEN = cssClasses.OPEN,\n        ANIMATE = cssClasses.ANIMATE,\n        ROOT = cssClasses.ROOT; // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n\n    var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);\n\n    if (!isRootElement) {\n      return;\n    }\n\n    if (this.isClosing()) {\n      this.adapter_.removeClass(OPEN);\n      this.closed_();\n      this.adapter_.restoreFocus();\n      this.adapter_.notifyClose();\n    } else {\n      this.adapter_.focusActiveNavigationItem();\n      this.opened_();\n      this.adapter_.notifyOpen();\n    }\n\n    this.adapter_.removeClass(ANIMATE);\n    this.adapter_.removeClass(OPENING);\n    this.adapter_.removeClass(CLOSING);\n  };\n  /**\r\n   * Extension point for when drawer finishes open animation.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.opened_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\r\n   * Extension point for when drawer finishes close animation.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.closed_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\r\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\r\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n    var _this = this;\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(function () {\n      _this.animationFrame_ = 0;\n      clearTimeout(_this.animationTimer_);\n      _this.animationTimer_ = setTimeout(callback, 0);\n    });\n  };\n\n  MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\n    // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\n    return Boolean(element.classList);\n  };\n\n  return MDCDismissibleDrawerFoundation;\n}(MDCFoundation);\n\nexport { MDCDismissibleDrawerFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCDismissibleDrawerFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,aAAR,QAA4B,2BAA5B;AAEA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,cAAlC;;AAEA,IAAA,8BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,OAAA,CAAA,SAAA,CAAA,8BAAA,EAAA,MAAA;;AA8BlD,WAAA,8BAAA,CAAY,OAAZ,EAA+C;AAA/C,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAU,8BAA8B,CAAC,cAAzC,EAA4D,OAA5D,CAAA,KAAqE,IADvE;;AAHQ,IAAA,KAAA,CAAA,eAAA,GAAkB,CAAlB;AACA,IAAA,KAAA,CAAA,eAAA,GAAkB,CAAlB;;AAIP;;AA/BD,EAAA,MAAA,CAAA,cAAA,CAAW,8BAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACE,aAAO,OAAP;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,8BAAX,EAAW,YAAX,EAAqB;SAArB,YAAA;AACE,aAAO,UAAP;AACD,KAFoB;oBAAA;;AAAA,GAArB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,8BAAX,EAAW,gBAAX,EAAyB;SAAzB,YAAA;AACE;AACA,aAAO;AACL,QAAA,QAAQ,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SADpB;AAEL,QAAA,WAAW,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SAFvB;AAGL,QAAA,QAAQ,EAAE,YAAA;AAAM,iBAAA,KAAA;AAAK,SAHhB;AAIL,QAAA,eAAe,EAAE,YAAA;AAAM,iBAAA,KAAA;AAAK,SAJvB;AAKL,QAAA,WAAW,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SALvB;AAML,QAAA,UAAU,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SANtB;AAOL,QAAA,SAAS,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SAPrB;AAQL,QAAA,YAAY,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SARxB;AASL,QAAA,yBAAyB,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SATrC;AAUL,QAAA,SAAS,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS,SAVrB;AAWL,QAAA,YAAY,EAAE,YAAA;AAAM,iBAAA,SAAA;AAAS;AAXxB,OAAP,CAFF,CAeE;AACD,KAhBwB;oBAAA;;AAAA,GAAzB;;AAyBA,EAAA,8BAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,QAAI,KAAK,eAAT,EAA0B;AACxB,MAAA,oBAAoB,CAAC,KAAK,eAAN,CAApB;AACD;;AACD,QAAI,KAAK,eAAT,EAA0B;AACxB,MAAA,YAAY,CAAC,KAAK,eAAN,CAAZ;AACD;AACF,GAPD;AASA;;AAEG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,MAAL,MAAiB,KAAK,SAAL,EAAjB,IAAqC,KAAK,SAAL,EAAzC,EAA2D;AACzD;AACD;;AAED,SAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,IAAlC;AACA,SAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,EANF,CAQE;;AACA,SAAK,sBAAL,CAA4B,YAAA;AAC1B,MAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC;AACD,KAFD;AAIA,SAAK,QAAL,CAAc,SAAd;AACD,GAdD;AAgBA;;AAEG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAI,CAAC,KAAK,MAAL,EAAD,IAAkB,KAAK,SAAL,EAAlB,IAAsC,KAAK,SAAL,EAA1C,EAA4D;AAC1D;AACD;;AAED,SAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC;AACD,GAND;AAQA;;;AAGG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,IAAlC,CAAP;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,KAA8C,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,CAArD;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,CAAP;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,GAAd,EAAgC;AACvB,QAAA,OAAA,GAAA,GAAA,CAAA,OAAA;AAAA,QAAS,GAAA,GAAA,GAAA,CAAA,GAAT;AACP,QAAM,QAAQ,GAAG,GAAG,KAAK,QAAR,IAAoB,OAAO,KAAK,EAAjD;;AACA,QAAI,QAAJ,EAAc;AACZ,WAAK,KAAL;AACD;AACF,GAND;AAQA;;AAEG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,GAApB,EAAwC;AAC/B,QAAA,OAAA,GAAA,UAAA,CAAA,OAAA;AAAA,QAAS,OAAA,GAAA,UAAA,CAAA,OAAT;AAAA,QAAkB,IAAA,GAAA,UAAA,CAAA,IAAlB;AAAA,QAAwB,OAAA,GAAA,UAAA,CAAA,OAAxB;AAAA,QAAiC,IAAA,GAAA,UAAA,CAAA,IAAjC,CAD+B,CAGtC;;AACA,QAAM,aAAa,GAAG,KAAK,UAAL,CAAgB,GAAG,CAAC,MAApB,KAA+B,KAAK,QAAL,CAAc,eAAd,CAA8B,GAAG,CAAC,MAAlC,EAA0C,IAA1C,CAArD;;AACA,QAAI,CAAC,aAAL,EAAoB;AAClB;AACD;;AAED,QAAI,KAAK,SAAL,EAAJ,EAAsB;AACpB,WAAK,QAAL,CAAc,WAAd,CAA0B,IAA1B;AACA,WAAK,OAAL;AACA,WAAK,QAAL,CAAc,YAAd;AACA,WAAK,QAAL,CAAc,WAAd;AACD,KALD,MAKO;AACL,WAAK,QAAL,CAAc,yBAAd;AACA,WAAK,OAAL;AACA,WAAK,QAAL,CAAc,UAAd;AACD;;AAED,SAAK,QAAL,CAAc,WAAd,CAA0B,OAA1B;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,OAA1B;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,OAA1B;AACD,GAvBD;AAyBA;;AAEG;;;AACO,EAAA,8BAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA,CAAsB,CAAZ,CA3IZ,CA2IyB;;AAEvB;;AAEG;;;AACO,EAAA,8BAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA,CAAsB,CAAZ,CAhJZ,CAgJyB;;AAEvB;;AAEG;;;AACK,EAAA,8BAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,UAA+B,QAA/B,EAAmD;AAAnD,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,oBAAoB,CAAC,KAAK,eAAN,CAApB;AACA,SAAK,eAAL,GAAuB,qBAAqB,CAAC,YAAA;AAC3C,MAAA,KAAI,CAAC,eAAL,GAAuB,CAAvB;AACA,MAAA,YAAY,CAAC,KAAI,CAAC,eAAN,CAAZ;AACA,MAAA,KAAI,CAAC,eAAL,GAAuB,UAAU,CAAC,QAAD,EAAW,CAAX,CAAjC;AACD,KAJ2C,CAA5C;AAKD,GAPO;;AASA,EAAA,8BAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,OAAnB,EAAmC;AACjC;AACA,WAAO,OAAO,CAAE,OAAmB,CAAC,SAAtB,CAAd;AACD,GAHO;;AAIV,SAAA,8BAAA;AAAC,CAlKD,CAAoD,aAApD,CAAA;;2CAoKA;;AACA,eAAe,8BAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MDCFoundation } from '@material/base/foundation';\r\nimport { cssClasses, strings } from '../constants';\r\nvar MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MDCDismissibleDrawerFoundation, _super);\r\n    function MDCDismissibleDrawerFoundation(adapter) {\r\n        var _this = _super.call(this, tslib_1.__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;\r\n        _this.animationFrame_ = 0;\r\n        _this.animationTimer_ = 0;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"strings\", {\r\n        get: function () {\r\n            return strings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"cssClasses\", {\r\n        get: function () {\r\n            return cssClasses;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"defaultAdapter\", {\r\n        get: function () {\r\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\r\n            return {\r\n                addClass: function () { return undefined; },\r\n                removeClass: function () { return undefined; },\r\n                hasClass: function () { return false; },\r\n                elementHasClass: function () { return false; },\r\n                notifyClose: function () { return undefined; },\r\n                notifyOpen: function () { return undefined; },\r\n                saveFocus: function () { return undefined; },\r\n                restoreFocus: function () { return undefined; },\r\n                focusActiveNavigationItem: function () { return undefined; },\r\n                trapFocus: function () { return undefined; },\r\n                releaseFocus: function () { return undefined; },\r\n            };\r\n            // tslint:enable:object-literal-sort-keys\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MDCDismissibleDrawerFoundation.prototype.destroy = function () {\r\n        if (this.animationFrame_) {\r\n            cancelAnimationFrame(this.animationFrame_);\r\n        }\r\n        if (this.animationTimer_) {\r\n            clearTimeout(this.animationTimer_);\r\n        }\r\n    };\r\n    /**\r\n     * Opens the drawer from the closed state.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.open = function () {\r\n        var _this = this;\r\n        if (this.isOpen() || this.isOpening() || this.isClosing()) {\r\n            return;\r\n        }\r\n        this.adapter_.addClass(cssClasses.OPEN);\r\n        this.adapter_.addClass(cssClasses.ANIMATE);\r\n        // Wait a frame once display is no longer \"none\", to establish basis for animation\r\n        this.runNextAnimationFrame_(function () {\r\n            _this.adapter_.addClass(cssClasses.OPENING);\r\n        });\r\n        this.adapter_.saveFocus();\r\n    };\r\n    /**\r\n     * Closes the drawer from the open state.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.close = function () {\r\n        if (!this.isOpen() || this.isOpening() || this.isClosing()) {\r\n            return;\r\n        }\r\n        this.adapter_.addClass(cssClasses.CLOSING);\r\n    };\r\n    /**\r\n     * Returns true if the drawer is in the open position.\r\n     * @return true if drawer is in open state.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\r\n        return this.adapter_.hasClass(cssClasses.OPEN);\r\n    };\r\n    /**\r\n     * Returns true if the drawer is animating open.\r\n     * @return true if drawer is animating open.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\r\n        return this.adapter_.hasClass(cssClasses.OPENING) || this.adapter_.hasClass(cssClasses.ANIMATE);\r\n    };\r\n    /**\r\n     * Returns true if the drawer is animating closed.\r\n     * @return true if drawer is animating closed.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\r\n        return this.adapter_.hasClass(cssClasses.CLOSING);\r\n    };\r\n    /**\r\n     * Keydown handler to close drawer when key is escape.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\r\n        var keyCode = evt.keyCode, key = evt.key;\r\n        var isEscape = key === 'Escape' || keyCode === 27;\r\n        if (isEscape) {\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     * Handles the `transitionend` event when the drawer finishes opening/closing.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\r\n        var OPENING = cssClasses.OPENING, CLOSING = cssClasses.CLOSING, OPEN = cssClasses.OPEN, ANIMATE = cssClasses.ANIMATE, ROOT = cssClasses.ROOT;\r\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\r\n        var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);\r\n        if (!isRootElement) {\r\n            return;\r\n        }\r\n        if (this.isClosing()) {\r\n            this.adapter_.removeClass(OPEN);\r\n            this.closed_();\r\n            this.adapter_.restoreFocus();\r\n            this.adapter_.notifyClose();\r\n        }\r\n        else {\r\n            this.adapter_.focusActiveNavigationItem();\r\n            this.opened_();\r\n            this.adapter_.notifyOpen();\r\n        }\r\n        this.adapter_.removeClass(ANIMATE);\r\n        this.adapter_.removeClass(OPENING);\r\n        this.adapter_.removeClass(CLOSING);\r\n    };\r\n    /**\r\n     * Extension point for when drawer finishes open animation.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.opened_ = function () { }; // tslint:disable-line:no-empty\r\n    /**\r\n     * Extension point for when drawer finishes close animation.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.closed_ = function () { }; // tslint:disable-line:no-empty\r\n    /**\r\n     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\r\n     */\r\n    MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\r\n        var _this = this;\r\n        cancelAnimationFrame(this.animationFrame_);\r\n        this.animationFrame_ = requestAnimationFrame(function () {\r\n            _this.animationFrame_ = 0;\r\n            clearTimeout(_this.animationTimer_);\r\n            _this.animationTimer_ = setTimeout(callback, 0);\r\n        });\r\n    };\r\n    MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\r\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\r\n        return Boolean(element.classList);\r\n    };\r\n    return MDCDismissibleDrawerFoundation;\r\n}(MDCFoundation));\r\nexport { MDCDismissibleDrawerFoundation };\r\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\r\nexport default MDCDismissibleDrawerFoundation;\r\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}