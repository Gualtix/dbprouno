{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mateo\\\\Desktop\\\\2Semestre2021\\\\Dic-Bases2\\\\Clase\\\\dbprouno\\\\Plataforma\\\\FrontEnd\\\\src\\\\Components\\\\Tabla\\\\TablaF.js\";\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = styled(TableCell)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14\n    }\n  };\n});\nconst StyledTableRow = styled(TableRow)(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0\n    }\n  };\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nconst rows = [createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Eclair', 262, 16.0, 24, 6.0), createData('Cupcake', 305, 3.7, 67, 4.3), createData('Gingerbread', 356, 16.0, 49, 3.9)];\nexport default function CustomizedTables(props) {\n  var data = [];\n  var fechas = [];\n  var etiquetas;\n  var unique = [];\n  var cont = 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [(props.arreglo === \"\" ? \"\" : props.arreglo.map(item => {\n      var findItem = unique.find(x => x.fecha === item.fecha);\n      if (!findItem) unique.push(item);\n    }), console.log(\"array\"), console.log(unique)), props.bancos === \"\" ? \"\" : (data.splice(0, data.length), props.bancos.map((el, index) => {\n      var cadena1 = [];\n      cadena1.push(el);\n      props.arreglo.map((e, index) => (fechas = new Date(e.fecha), e.banco === el ? (cadena1.push(e.ranking), etiquetas = etiquetas + e.ranking + \",\" //cadena1.push({\"y\":e.ranking,\"label\":e.fecha})\n      //cadena1.push({\"y\":e.ranking,\"label\":fechas.getFullYear() +\"/\"+ (fechas.getMonth()+1)+\"/\"+fechas.getDate()})\n      ) : \"\"));\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: ( //data.splice(0, data.length),\n        //(data.push({\"type\":\"line\",\"name\":el,\"showInLegend\": \"true\", \"dataPoints\":cadena1})) === \"\" ? \"\":\"\"\n\n        /*\r\n        cadena1 === [] ? \"\" :(\r\n            cadena1.map((e,index)=>(\r\n                data.push(e)\r\n            ))\r\n        ),*/\n        data.push(cadena1), console.log(cadena1), console.log('la data'), console.log(data))\n      }, void 0, false) //el.banco,  el.fecha.getFullYear() +el.fecha.getMonth()+el.fecha.getDate()\n      ;\n    })), \",\", data.map((e, index) => e.map((el, index) => \"elemento\" + el + \"nose \")), \",\", /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 700\n        },\n        \"aria-label\": \"customized table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: \"Perfil Financiero\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 13\n            }, this), unique === [] ? \"\" : unique.map((e, index) => (fechas = new Date(e.fecha), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"right\",\n              children: fechas.getFullYear() + \"-\" + (fechas.getMonth() + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this)))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: data === [] ? \"\" : data.map(rows => (cont = 0, /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: rows.map((row, index) => cont === 0 ? cont = cont + 1 : /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"right\",\n              children: [\" \", row, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 23\n            }, this) //, cont = cont + 1,console.log(row)//,console.log('cosas'),console.log(cont),console.log(e)\n            )\n          }, rows[0], false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_c = CustomizedTables;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomizedTables\");","map":{"version":3,"sources":["C:/Users/Mateo/Desktop/2Semestre2021/Dic-Bases2/Clase/dbprouno/Plataforma/FrontEnd/src/Components/Tabla/TablaF.js"],"names":["React","styled","Table","TableBody","TableCell","tableCellClasses","TableContainer","TableHead","TableRow","Paper","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","action","hover","border","createData","name","calories","fat","carbs","protein","rows","CustomizedTables","props","data","fechas","etiquetas","unique","cont","arreglo","map","item","findItem","find","x","fecha","push","console","log","bancos","splice","length","el","index","cadena1","e","Date","banco","ranking","minWidth","getFullYear","getMonth","row"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  '&:last-child td, &:last-child th': {\r\n    border: 0,\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function CustomizedTables( props) {\r\n\r\n    var data = [];\r\n    var fechas = [];\r\n    var etiquetas;\r\n    var unique = [];\r\n    var cont = 0;\r\n  return (\r\n    <>\r\n    \r\n    {\r\n        props.arreglo === \"\" ? \"\" :\r\n            props.arreglo.map(item => {                  \r\n                var findItem = unique.find(x => x.fecha === item.fecha);\r\n                if (!findItem)\r\n                    unique.push(item);\r\n            }),console.log(\"array\"),console.log(unique)\r\n        }\r\n    {\r\n    props.bancos  === \"\"? \"\":(\r\n            data.splice(0, data.length),\r\n            props.bancos.map((el,index)=>{\r\n                var cadena1 = []\r\n                cadena1.push(el)\r\n                    props.arreglo.map((e,index)=>(\r\n                        fechas = new Date(e.fecha),\r\n\r\n                        e.banco === el ? (\r\n                            cadena1.push(e.ranking),\r\n                            etiquetas = etiquetas + e.ranking + \",\"\r\n                            //cadena1.push({\"y\":e.ranking,\"label\":e.fecha})\r\n                            //cadena1.push({\"y\":e.ranking,\"label\":fechas.getFullYear() +\"/\"+ (fechas.getMonth()+1)+\"/\"+fechas.getDate()})\r\n\r\n                        ):\"\"\r\n                    )\r\n                )\r\n                \r\n                return(\r\n                    <>\r\n                    {//data.splice(0, data.length),\r\n                    //(data.push({\"type\":\"line\",\"name\":el,\"showInLegend\": \"true\", \"dataPoints\":cadena1})) === \"\" ? \"\":\"\"\r\n                        /*\r\n                        cadena1 === [] ? \"\" :(\r\n                            cadena1.map((e,index)=>(\r\n                                data.push(e)\r\n                            ))\r\n                        ),*/\r\n                        data.push(cadena1),\r\n                        console.log(cadena1), console.log('la data'), console.log(data)\r\n                        \r\n                    } \r\n                    </>\r\n                    //el.banco,  el.fecha.getFullYear() +el.fecha.getMonth()+el.fecha.getDate()\r\n                )\r\n            })\r\n            )\r\n            },{\r\n                data.map((e,index)=>(\r\n                    e.map((el,index)=>(\r\n                        \"elemento\" + el + \"nose \" \r\n                    ))\r\n                ))\r\n            },\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Perfil Financiero</StyledTableCell>\r\n            {\r\n                unique === [] ? \"\" :(\r\n                   unique.map((e,index)=>(\r\n                    fechas = new Date(e.fecha),\r\n                    <StyledTableCell align=\"right\">{fechas.getFullYear() +\"-\"+ (fechas.getMonth()+1)}</StyledTableCell>  \r\n                   )) \r\n                )\r\n            }\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n           {/*data.map((rows) => (\r\n              \r\n            <StyledTableRow key={rows[0]}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {rows[0]}\r\n              </StyledTableCell>\r\n              {\r\n                data === [] ? \"\" :(\r\n                   data.map((e,index)=>(\r\n                    fechas = new Date(e.fecha),\r\n                    <StyledTableCell align=\"right\">{fechas.getFullYear() +\"-\"+ (fechas.getMonth()+1)}</StyledTableCell>  \r\n                   )) \r\n                )\r\n            }\r\n              </StyledTableRow>\r\n        ))*/}\r\n\r\n            {\r\n            data === [] ? \"\" :(\r\n            data.map((rows) => (\r\n              cont = 0,\r\n              <StyledTableRow key={rows[0]}>\r\n               \r\n\r\n                {\r\n                     rows.map((row,index)=>(\r\n                        cont === 0 ? (cont = cont +1) :(\r\n                      <StyledTableCell align=\"right\"> { row } </StyledTableCell>  \r\n                        )//, cont = cont + 1,console.log(row)//,console.log('cosas'),console.log(cont),console.log(e)\r\n                     )) \r\n                  \r\n              }\r\n                </StyledTableRow>\r\n              )))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    \r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}